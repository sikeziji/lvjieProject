package com.yzlm.cyl.cfragment.Content.Component.List5;import android.annotation.SuppressLint;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.os.Handler;import android.os.Message;import android.support.v4.app.Fragment;import android.view.View;import android.widget.LinearLayout;import android.widget.TextView;import android.widget.Toast;import com.yzlm.cyl.cfragment.Communication.Thread.SendManager;import com.yzlm.cyl.cfragment.Global;import com.yzlm.cyl.cfragment.R;import com.yzlm.cyl.clibrary.CFragment.SubFragment;import com.yzlm.cyl.clibrary.Util.DataUtil;import java.io.File;import java.util.Arrays;import java.util.Comparator;import zwj.hz.zj.zwj.UpdateManager;import static com.yzlm.cyl.cfragment.Communication.Component.Cmd.CommandPackaging.GetForwardCmd;import static com.yzlm.cyl.cfragment.Config.Component.CfgTool.Config.getConfigData;import static com.yzlm.cyl.cfragment.Content.Component.ContentTool.setW200JLBoard;import static com.yzlm.cyl.cfragment.Content.Module.ModuleDistinction.QueryMeasBoardType;import static com.yzlm.cyl.cfragment.Content.Module.ModuleDistinction.QueryMeasCateg;import static com.yzlm.cyl.cfragment.Frame.MainActivity.mCompName;import static com.yzlm.cyl.cfragment.Frame.MainActivity.main;import static com.yzlm.cyl.cfragment.Frame.MainActivity.mfb;import static com.yzlm.cyl.cfragment.Global.GDJCB;import static com.yzlm.cyl.cfragment.Global.IOBoardUsed;import static com.yzlm.cyl.cfragment.Global.JXQDB;import static com.yzlm.cyl.cfragment.Global.RealTimeStatusThread;import static com.yzlm.cyl.cfragment.Global.S0;import static com.yzlm.cyl.cfragment.Global.S1;import static com.yzlm.cyl.cfragment.Global.blAuthenticationFunction;import static com.yzlm.cyl.cfragment.Global.context;import static com.yzlm.cyl.cfragment.Global.getCmds;import static com.yzlm.cyl.cfragment.Global.saveExceptInfo2File;import static com.yzlm.cyl.cfragment.Global.strAll5721Component;import static com.yzlm.cyl.clibrary.Util.DataUtil.bytesToHexString;import static com.yzlm.cyl.clibrary.Util.DataUtil.reverse;import static com.yzlm.cyl.clibrary.Util.DataUtil.shortToByte;/** * Created by caoyiliang on 2016/10/28. */public class List5_Content1 extends SubFragment {    private static List5_Content1 fragment = null;    private Callbacks mCallbacks;    private static TextView tvHMIVer;    private static TextView tvObsCtrlAVer;    private static TextView tvObsCtrlBVer;    private static TextView tvJLBVer;    private static TextView tvPermeanceMeasVer;    private static TextView tvReceiveBoardVer;    private static TextView tvOrpBoardVer;    public static TextView tvSpecDevVer;    public static TextView tvJXBBoardVer;    public static TextView tvGDJCBoardVer;    private static String componetName = "";    //0 测控板A 1 测控板B 2 磁导计量板 3 接口板 4  计量板 5 ORP电极板  6 机械驱动板  7 光电检测板    public static String[][] verStrArr = new String[strAll5721Component.get(1).length][8];    public static int id = 0;    private final String sdPath1 = "/storage/usbdisk1/zt/";    private final String sdPath2 = "/storage/usbdisk2/zt/";    private final String sdPath3 = "/storage/usbdisk3/zt/";    private final String sdPath4 = "/storage/usbdisk4/zt/";    LinearLayout mLayout_CKB;    public static List5_Content1 newInstance() {        if (fragment == null) {            fragment = new List5_Content1();        }        return fragment;    }    public interface Callbacks {        void onDialogRS();    }    @Override    protected Fragment createFragment() {        return null;    }    @Override    protected int getLayoutResId() {        return R.layout.list5_content1;    }    @Override    protected int getListResId() {        return 0;    }    @Override    protected void DoThings() {        try {            RealTimeStatusThread.suspend();            componetName = mCompName;            id = getComponentId(componetName);            if (QueryMeasCateg(componetName).equals("5") || QueryMeasCateg(componetName).equals("6")) {                Global.LockDisplayShowFlag = true;                verStrArr[id][0] = "";                verStrArr[id][1] = "";                verStrArr[id][2] = "";            }            tvHMIVer = v.findViewById(R.id.tvHMIVer);            tvHMIVer.setText("Water_" + getVersionName());            tvHMIVer.setOnLongClickListener(new HmiOnclickLister());            String strClientVersion = "";            if (blAuthenticationFunction) {                strClientVersion = "_Auth";            }            String strHmi = tvHMIVer.getText().toString() + strClientVersion;            tvHMIVer.setText(strHmi);            tvObsCtrlAVer = v.findViewById(R.id.tvCKAVer);            tvObsCtrlBVer = v.findViewById(R.id.tvCKBVer);            tvPermeanceMeasVer = v.findViewById(R.id.tvCDJLVer);            tvReceiveBoardVer = v.findViewById(R.id.tvJKBVer);            tvJLBVer = v.findViewById(R.id.tvJLBVer);            tvOrpBoardVer = v.findViewById(R.id.tvORPVer);            tvJXBBoardVer = v.findViewById(R.id.tvJXBVer);            tvGDJCBoardVer = v.findViewById(R.id.tvGDJCVer);            LinearLayout mLayout_CDJL = v.findViewById(R.id.layout_CDJLB);            LinearLayout mLayout_JLB = v.findViewById(R.id.layout_JLB);            LinearLayout mLayout_JKB = v.findViewById(R.id.layout_JKB);            LinearLayout mLayout_ORP = v.findViewById(R.id.layout_ORPDJB);            LinearLayout mLayout_JXB = v.findViewById(R.id.layout_JXQDB);            LinearLayout mLayout_GDJC = v.findViewById(R.id.layout_GDJCB);            tvObsCtrlAVer.setText("");            tvObsCtrlBVer.setText("");            tvPermeanceMeasVer.setText("");            tvReceiveBoardVer.setText("");            tvJLBVer.setText("");            tvOrpBoardVer.setText("");            tvJXBBoardVer.setText("");            tvGDJCBoardVer.setText("");//        tvSpecDevVer=(TextView)v.findViewById(R.id.tvGPYVer);            // 接口板 ORP 隐藏            if ((QueryMeasCateg(componetName).equals("5")) || QueryMeasCateg(componetName).equals("6")) {                mLayout_JKB.setVisibility(View.GONE);                mLayout_ORP.setVisibility(View.GONE);            } else {                // 接口板是否隐藏                if (IOBoardUsed) {                    if (verStrArr[id][3] == null || verStrArr[id][3].equals("")) {                        byte[] arrayOfByte = shortToByte((short) 6);                        reverse(arrayOfByte);                        SendManager.SendCmd(componetName + "_查接口板版本号" + "_3_" + bytesToHexString(arrayOfByte, 2).replace(" ", ""), S1, 3, 300, 0);                    } else {                        tvReceiveBoardVer.setText(verStrArr[id][3]);                    }                } else {                    mLayout_JKB.setVisibility(View.GONE);                }            }            // 测控板A 版本号            //if (verStrArr[id][0] == null || verStrArr[id][0].equals("")) {            byte[] arrayOfByte = DataUtil.shortToByte((short) 2);            DataUtil.reverse(arrayOfByte);            SendManager.SendCmd(componetName + "_查测控A版本号" + "_3_" + DataUtil.bytesToHexString(arrayOfByte, 2).replace(" ", ""), S0, 3, 300, 8);            //} else {            //    tvObsCtrlAVer.setText(verStrArr[id][0]);            //}            // 测控板B 版本号            mLayout_CKB = v.findViewById(R.id.layout_CKB);            if (!QueryMeasBoardType(componetName).equals("2")) {                mLayout_CKB.setVisibility(View.VISIBLE);                if (verStrArr[id][1] == null || verStrArr[id][1].equals("")) {                    byte[] arrayOfByte1 = DataUtil.shortToByte((short) 10);                    DataUtil.reverse(arrayOfByte1);                    SendManager.SendCmd(componetName + "_查测控B版本号" + "_3_" + DataUtil.bytesToHexString(arrayOfByte1, 2).replace(" ", ""), S0, 3, 300, 8);                } else {                    tvObsCtrlBVer.setText(verStrArr[id][1]);                }            } else {                mLayout_CKB.setVisibility(View.GONE);            }            // 磁导计量版本号            if (QueryMeasBoardType(componetName).equals("2") || QueryMeasCateg(componetName).equals("4")                    || QueryMeasCateg(componetName).equals("3") || QueryMeasCateg(componetName).equals("8")                    || QueryMeasCateg(componetName).equals("9") || QueryMeasCateg(componetName).equals("11")                    || QueryMeasCateg(componetName).equals("12") || QueryMeasCateg(componetName).equals("13")) {                mLayout_CDJL.setVisibility(View.GONE);            } else {                if (verStrArr[id][2] != null) {                    tvPermeanceMeasVer.setText(verStrArr[id][2]);                }            }            // 计量板版本号            if (QueryMeasBoardType(componetName).equals("2") || QueryMeasCateg(componetName).equals("4") || QueryMeasCateg(componetName).equals("3") || QueryMeasCateg(componetName).equals("8")) {                if (verStrArr[id][4] == null || verStrArr[id][4].equals("")) {                    setW200JLBoard(componetName);                    for (int i = 0; i < 20; i++) {                        if (!getConfigData(componetName, "JLB_" + (i + 1) + "_NAME").equals("")) {                            byte[] arrayOfByte1 = DataUtil.shortToByte((short) (8100 + 8 * i));                            DataUtil.reverse(arrayOfByte1);                            SendManager.SendCmd(componetName + "_查计量板" + (i + 1) + "版本号" + "_3_" + DataUtil.bytesToHexString(arrayOfByte1, 2).replace(" ", ""), S0, 3, 300, 8);                            break;                        }                    }                } else {                    tvJLBVer.setText(verStrArr[id][4]);                }            } else {                mLayout_JLB.setVisibility(View.GONE);            }            // ORP 版本号            if (QueryMeasCateg(componetName).equals("3") || QueryMeasCateg(componetName).equals("8")) {                if (verStrArr[id][5] == null || verStrArr[id][5].equals("")) {                    byte[] arrayOfByte1 = DataUtil.shortToByte((short) (34));                    DataUtil.reverse(arrayOfByte1);                    SendManager.SendCmd(componetName + "_查ORP版本号" + "_3_" + DataUtil.bytesToHexString(arrayOfByte1, 2).replace(" ", ""), S0, 3, 300, 8);                } else {                    tvOrpBoardVer.setText(verStrArr[id][5]);                }            } else {                mLayout_ORP.setVisibility(View.GONE);            }            if (QueryMeasCateg(componetName).equals("13")) {                //机械驱动板                if (verStrArr[id][6] == null || verStrArr[id][6].equals("")) {                    arrayOfByte = shortToByte((short) 32);                    reverse(arrayOfByte);                    byte[] Cmd = GetForwardCmd(mCompName, 3, (byte) 3, bytesToHexString(arrayOfByte, 2).replace(" ", ""), 15);                    if (Cmd != null) {                        SendManager.SendCmd(mCompName + "_查机械驱动板版本号_32_" + JXQDB + "_" + 8, S0, 3, 400, Cmd);                    }                } else {                    tvJXBBoardVer.setText(verStrArr[id][6]);                }                //光电检测板                if (verStrArr[id][7] == null || verStrArr[id][7].equals("")) {                    arrayOfByte = shortToByte((short) 1);                    reverse(arrayOfByte);                    byte[] Cmd = GetForwardCmd(mCompName, 1, (byte) 3, bytesToHexString(arrayOfByte, 2).replace(" ", ""), 8);                    if (Cmd != null) {                        SendManager.SendCmd(mCompName + "_查光电检测板版本号_32_" + GDJCB + "_" + 8, S0, 3, 400, Cmd);                    }                } else {                    tvGDJCBoardVer.setText(verStrArr[id][7]);                }            } else {                mLayout_JXB.setVisibility(View.GONE);                mLayout_GDJC.setVisibility(View.GONE);            }        } catch (Exception e) {            saveExceptInfo2File("组分[" + componetName + "]" + e.toString());        } finally {            RealTimeStatusThread.resume();        }    }    /*     * 获取当前应用的版本号     */    private String getVersionName() {        try {            // 获取packagemanager的实例            PackageManager packageManager = main.getPackageManager();            // getPackageName()是你当前类的包名，0代表是获取版本信息            PackageInfo packInfo = packageManager.getPackageInfo(main.getPackageName(), 0);            return packInfo.versionName;        } catch (PackageManager.NameNotFoundException e) {            e.printStackTrace();            return "";        }    }    @SuppressLint("HandlerLeak")    public static Handler mSoftwareVerHandler = new Handler() {        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case 2: {                    if (tvObsCtrlAVer != null) {                        String obsCtrlAVer = (getCmds(componetName).getCmd(2).getValue() == null ? "" : getCmds(componetName).getCmd(2).getValue()).toString();                        verStrArr[id][0] = obsCtrlAVer;                        tvObsCtrlAVer.setText(obsCtrlAVer.contains("版本") ? context.getString(R.string.unread_ver) : obsCtrlAVer);                    }                }                break;                case 10: {                    if (tvObsCtrlBVer != null) {                        String obsCtrlBVer = (getCmds(componetName).getCmd(10).getValue() == null ? "" : getCmds(componetName).getCmd(10).getValue()).toString();                        verStrArr[id][1] = obsCtrlBVer;                        tvObsCtrlBVer.setText(obsCtrlBVer.contains("版本") ? context.getString(R.string.unread_ver) : obsCtrlBVer);                        byte[] arrayOfByte = DataUtil.shortToByte((short) 18);                        DataUtil.reverse(arrayOfByte);                        SendManager.SendCmd(componetName + "_查磁导计量版本号" + "_3_" + DataUtil.bytesToHexString(arrayOfByte, 2).replace(" ", ""), S0, 3, 300, 8);                    }                }                break;                case 18: {                    if (tvPermeanceMeasVer != null) {                        String permeanceMeasVer = (getCmds(componetName).getCmd(18).getValue() == null ? "" : getCmds(componetName).getCmd(18).getValue()).toString();                        tvPermeanceMeasVer.setText(permeanceMeasVer);                        verStrArr[id][2] = permeanceMeasVer;                        tvPermeanceMeasVer.setText(verStrArr[id][2].contains("版本") ? context.getString(R.string.unread_ver) : verStrArr[id][2]);                    }                }                break;                case 6: {                    if (tvReceiveBoardVer != null) {                        String receiveBoardVer = verStrArr[id][3];                        tvReceiveBoardVer.setText(receiveBoardVer.contains("版本") ? context.getString(R.string.unread_ver) : receiveBoardVer);                    }                }                break;                case 34:                    if (tvOrpBoardVer != null) {                        String orpVer = (getCmds(componetName).getCmd(34).getValue() == null ? "" : getCmds(componetName).getCmd(34).getValue()).toString();                        verStrArr[id][5] = orpVer;                        tvOrpBoardVer.setText(orpVer.contains("版本") ? context.getString(R.string.unread_ver) : orpVer);                    }                    break;                case 8100:                case 8108:                case 8116:                case 8124:                case 8132:                case 8140:                case 8148:                case 8156:                case 8164:                case 8172:                case 8180:                case 8188:                case 8196:                case 8204:                case 8212:                case 8220:                case 8228:                case 8236:                case 8244:                case 8252:                    if (tvJLBVer != null) {                        verStrArr[id][4] = (getCmds(componetName).getCmd(msg.what).getValue() == null ? "" : getCmds(componetName).getCmd(msg.what).getValue()).toString();                        tvJLBVer.setText(verStrArr[id][4].contains("版本") ? context.getString(R.string.unread_ver) : verStrArr[id][4]);                    }                    break;                case 164: {                    if (tvJXBBoardVer != null) {                        String jxbVer = (String) msg.obj;                        verStrArr[id][6] = jxbVer;                        tvJXBBoardVer.setText(jxbVer.contains("版本") ? context.getString(R.string.unread_ver) : jxbVer);                    }                }                break;                case 33: {                    if (tvGDJCBoardVer != null) {                        String gdjcVer = (String) msg.obj;                        verStrArr[id][7] = gdjcVer;                        tvGDJCBoardVer.setText(gdjcVer.contains("版本") ? context.getString(R.string.unread_ver) : gdjcVer);                    }                }                break;            }        }    };    private File[] GetDirFilesName(String filePath) {        File[] files = null;        File localFile = new File(filePath);        if (localFile.isDirectory()) {            files = localFile.listFiles();        }        return files;    }    private String getLatestAPK(File[] files) {        String lastestApkName = null;        for (File f : files) {            if (f.getName().contains("Water")) {                if (lastestApkName == null) {                    lastestApkName = f.getName();                    continue;                }                /*根据时间判断找到最新的文件名*/                //按照文件最后修改日期倒序排序                Arrays.sort(files, new Comparator<File>() {                    @Override                    public int compare(File file1, File file2) {                        return (int) (file2.lastModified() - file1.lastModified());                    }                });                lastestApkName = files[0].getName();            }        }        return lastestApkName;    }    private class HmiOnclickLister implements View.OnLongClickListener {        @Override        public boolean onLongClick(View v) {            try {                String path = sdPath2;                File[] files = GetDirFilesName(sdPath2);                if (files == null || files.length == 0) {                    files = GetDirFilesName(sdPath1);                    path = sdPath1;                }                if (files == null || files.length == 0) {                    files = GetDirFilesName(sdPath3);                    path = sdPath3;                }                if (files == null || files.length == 0) {                    files = GetDirFilesName(sdPath4);                    path = sdPath4;                }                if (files != null && files.length > 0) {                    String sdFileName = getLatestAPK(files);                    if (!sdFileName.contains(tvHMIVer.getText().toString())) {                        Toast.makeText(context, getString(R.string.is_under_installation) + "....", Toast.LENGTH_SHORT).show();                        main.removeDestopText(mfb);                        UpdateManager mUpdateManager = new UpdateManager(getContext());                        mUpdateManager.setFilePathName(path, sdFileName);                        mUpdateManager.checkUpdateInfo();                   /* UpdateManager mUpdateManager = new UpdateManager(getContext());                    mUpdateManager.setFilePathName(sdPath, "CodeMannager.apk");                    mUpdateManager.checkUpdateInfo();*/                   /* String sdPath = Environment.getExternalStorageDirectory()                            .getAbsolutePath();*/                        //主要就是通过,安装程序之前,启动一个定时任务,任务发送一个广播,广播收到之后,启动程序                /*	UpdateAPKManager2 mUpdateManager = new UpdateAPKManager2(getContext());                    mUpdateManager.setFilePathName(sdPath, sdFileName);					mUpdateManager.checkUpdateInfo();					new Thread(new Runnable() {						@Override						public void run() {							try {								sleep(10000);								android.os.Process.killProcess(android.os.Process.myPid());							} catch (InterruptedException e) {								e.printStackTrace();							}						}					}).start();*/                    } else {                        Toast.makeText(context, getString(R.string.checkVersion) + "....", Toast.LENGTH_SHORT).show();                    }                } else {                    Toast.makeText(context, getString(R.string.findNotFile) + "....", Toast.LENGTH_SHORT).show();                }            } catch (Exception e) {            }            return false;        }    }    private int getComponentId(String compName) {        for (int i = 0; i < strAll5721Component.get(1).length; i++) {            if (strAll5721Component.get(1)[i].equals(compName)) {                return i;            }        }        return 0;    }}